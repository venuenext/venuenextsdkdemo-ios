// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name VNOrderData
import CoreData
import Foundation
import PassKit
import Swift
import VNCore
import VNNetworkService
@_exported import VNOrderData
import VNOrderService
import VNPayment
import os.log
import os
extension Metadata {
  public static func fetchAll(for itemUUID: Swift.String, in context: CoreData.NSManagedObjectContext) throws -> [VNOrderData.Metadata]
}
extension NSManagedObject {
  public static func create<T>() -> T where T : CoreData.NSManagedObject
}
extension Seat {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  public func update(seatLocation: VNOrderData.Seat, context: CoreData.NSManagedObjectContext)
}
extension Seat {
  public static func create(identifier: Swift.String, section: Swift.String, row: Swift.String? = nil, seatNumber: Swift.String? = nil, isSuite: Swift.Bool, aisles: [Swift.Int]? = nil) -> VNOrderData.Seat
}
extension ExperienceItem {
  public static func fetch(with identifier: Swift.String, createIfNecessary: Swift.Bool = true, in context: CoreData.NSManagedObjectContext) throws -> VNOrderData.ExperienceItem
  public static func fetch(by itemIdentifier: Swift.String, createIfNecessary: Swift.Bool = true, in context: CoreData.NSManagedObjectContext) throws -> VNOrderData.ExperienceItem
  public static func fetchAll(for orderSummaryIdentifier: Swift.String, in context: CoreData.NSManagedObjectContext) throws -> [VNOrderData.ExperienceItem]
  public static func fetchAll(in context: CoreData.NSManagedObjectContext) -> [VNOrderData.ExperienceItem]
}
extension Item {
  public func experiencePrice(for event: VNOrderData.ExperienceEvent?, groupType: VNOrderData.Sale.GroupType) -> Swift.Double?
  public func experiencePrice(for groupType: VNOrderData.Sale.GroupType) -> Swift.Double?
  public func earliestEvent() -> VNOrderData.ExperienceEvent?
  public func variant(for event: VNOrderData.ExperienceEvent) -> VNOrderData.Variant?
  public func inventory(for event: VNOrderData.ExperienceEvent? = nil) -> Swift.Int64?
}
extension Variant {
  public static func fetch(with identifier: Swift.String, createIfNecessary: Swift.Bool = true, in context: CoreData.NSManagedObjectContext) throws -> VNOrderData.Variant
  public static func fetch(for eventIdentifier: Swift.String, context: CoreData.NSManagedObjectContext) throws -> VNOrderData.Variant
}
@objc public class PostExperienceItemParser : ObjectiveC.NSObject {
  public static func parse(data: Foundation.Data, in context: CoreData.NSManagedObjectContext) throws
  public static func parse(transfer: [Swift.String : Any], in experienceItem: VNOrderData.ExperienceItem)
  @objc override dynamic public init()
  @objc deinit
}
extension CartEntry {
  public static func makeFetchedResultsController(for cart: VNOrderData.Cart, in context: CoreData.NSManagedObjectContext) throws -> CoreData.NSFetchedResultsController<VNOrderData.CartEntry>
  public static func fetch(with item: VNOrderData.Item, in context: CoreData.NSManagedObjectContext) throws -> VNOrderData.CartEntry?
  public static func fetch(with item: VNOrderData.Item, modifierEntries: [VNOrderData.ModifierCartEntry], in context: CoreData.NSManagedObjectContext) throws -> VNOrderData.CartEntry?
}
public class GetRevenueCentersParser {
  public static func parse(jsonArray: [[Swift.String : Any]], menusJsonArray: [[Swift.String : Any]]? = nil, into persistentContainer: CoreData.NSPersistentContainer)
  @objc deinit
}
extension GetRevenueCentersParser : VNCore.VNIdentifiable {
  public static var classStringName: Swift.String {
    get
  }
  public static var domain: Swift.String {
    get
  }
}
public struct OrderUpdateNotification : VNCore.SocketNotification {
  public var orderID: Swift.String
  public static func parse(json: [Swift.String : Any]) -> VNOrderData.OrderUpdateNotification?
}
@objc public class RemoteOrderAheadAvailability : ObjectiveC.NSObject, VNCore.PickerRowTitleRepresentable {
  final public let slot: Swift.String
  public var title: Swift.String {
    get
  }
  final public let menuUUIDs: [Swift.String]
  final public let date: Foundation.Date
  public var dateFormattedString: Swift.String {
    get
  }
  public var slotInCurrentLocale: Swift.String {
    get
  }
  public init(slot: Swift.String, menuUUIDs: [Swift.String], date: Foundation.Date)
  public func isAvailableForMenu(_ menu: VNOrderData.Menu) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
extension Collection where Self.Element : VNOrderData.RemoteOrderAheadAvailability {
  public func availableSlots(menu: VNOrderData.Menu) -> [Swift.String]
  public func availableFormattedSlots(menu: VNOrderData.Menu) -> [Swift.String]
  public func forMenu(_ menu: VNOrderData.Menu) -> [Self.Element]
  public var forToday: [Self.Element] {
    get
  }
}
extension ModifierGroup {
  public static func fetch(with identifier: Swift.String, createIfNecessary: Swift.Bool = true, in context: CoreData.NSManagedObjectContext) throws -> VNOrderData.ModifierGroup
  public static func fetchByName(with name: Swift.String, createIfNecessary: Swift.Bool = true, in context: CoreData.NSManagedObjectContext) throws -> VNOrderData.ModifierGroup
  public static func fetchAll(for itemUUID: Swift.String, in context: CoreData.NSManagedObjectContext) throws -> [VNOrderData.ModifierGroup]
}
extension ExperienceEvent {
  public static func fetch(with identifier: Swift.String, createIfNecessary: Swift.Bool = true, in context: CoreData.NSManagedObjectContext) throws -> VNOrderData.ExperienceEvent
  public static func fetchAllEvents(for menu: VNOrderData.Menu, in context: CoreData.NSManagedObjectContext) throws -> [VNOrderData.ExperienceEvent]
  public static func fetch(for experience: VNOrderData.Item, in context: CoreData.NSManagedObjectContext) throws -> [VNOrderData.ExperienceEvent]
}
@objc public class GetMenuItemsParser : ObjectiveC.NSObject {
  public static func parse(_ json: [Swift.String : Any], for menu: VNOrderData.Menu, in context: CoreData.NSManagedObjectContext)
  @objc override dynamic public init()
  @objc deinit
}
extension ModifierLineItem {
  public static func fetch(with identifier: Swift.String, createIfNecessary: Swift.Bool = true, in context: CoreData.NSManagedObjectContext) throws -> VNOrderData.ModifierLineItem
}
extension Cart {
  public var selectedOrderAheadAvailability: VNOrderData.RemoteOrderAheadAvailability? {
    get
    set(newValue)
  }
}
extension ModifierGroup {
  public func hasMetRequirements(for collectionView: UIKit.UICollectionView, at indexPath: Foundation.IndexPath) -> Swift.Bool
}
extension Menu : VNCore.MenuRepresentable {
}
extension Stand : VNCore.StandRepresentable {
}
@objc public class GetMenusParser : ObjectiveC.NSObject {
  public static func parse(jsonArray: [[Swift.String : Any]], into managedObjectContext: CoreData.NSManagedObjectContext)
  public static func parse(_ json: [Swift.String : Any], for revenueCenter: VNOrderData.Stand, in context: CoreData.NSManagedObjectContext) throws -> VNOrderData.Menu
  @objc override dynamic public init()
  @objc deinit
}
extension ModifierCartEntry {
  public func total() -> Swift.Int64
}
extension Cart {
  public static func add(item: VNOrderData.Item, modifiers: [VNOrderData.ModifierSelection]? = nil, quantity: Swift.Int64, to cart: VNOrderData.Cart, in context: CoreData.NSManagedObjectContext) throws
  public static func addExperience(item: VNOrderData.Item, event: VNOrderData.ExperienceEvent, metadata: [[Swift.String : Any]]? = nil, to cart: VNOrderData.Cart, in context: CoreData.NSManagedObjectContext) throws
  public func apply(promoCode: Swift.String)
  public func removePromoCode()
}
extension ModifierCartEntry {
  public static func make(from modifierSelection: VNOrderData.ModifierSelection, in context: CoreData.NSManagedObjectContext) -> VNOrderData.ModifierCartEntry
}
extension Cart {
  public func clear() throws
}
extension OrderSummary {
  public static func fetch(with identifier: Swift.String, createIfNecessary: Swift.Bool = true, in context: CoreData.NSManagedObjectContext) throws -> VNOrderData.OrderSummary
  public static func fetchAllFoodOrders(in context: CoreData.NSManagedObjectContext) -> [VNOrderData.OrderSummary]
  public static func fetchAllExperienceOrders(in context: CoreData.NSManagedObjectContext) -> [VNOrderData.OrderSummary]
  public static func fetchLineItems(with eventUUID: Swift.String, experienceUUID: Swift.String, in context: CoreData.NSManagedObjectContext) -> [VNOrderData.OrderSummary]
  public static func fetchAll(in context: CoreData.NSManagedObjectContext) -> [VNOrderData.OrderSummary]
}
extension OrderSummary {
  public enum FoodOpenStates : Swift.String, Swift.CaseIterable {
    case incomplete
    case submitting
    case submitted
    case queued
    case processing
    case bumped
    case assigned
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public typealias AllCases = [VNOrderData.OrderSummary.FoodOpenStates]
    public static var allCases: [VNOrderData.OrderSummary.FoodOpenStates] {
      get
    }
  }
  public enum ExperienceOpenStates : Swift.String, Swift.CaseIterable {
    case partiallyRedeemed
    case completed
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public typealias AllCases = [VNOrderData.OrderSummary.ExperienceOpenStates]
    public static var allCases: [VNOrderData.OrderSummary.ExperienceOpenStates] {
      get
    }
  }
  public func isOpenState(_ rawValue: Swift.String) -> Swift.Bool
  public var isOpen: Swift.Bool {
    get
  }
}
extension ItemCategory {
  public static func fetch(with identifier: Swift.String, createIfNecessary: Swift.Bool = true, in context: CoreData.NSManagedObjectContext) throws -> VNOrderData.ItemCategory
  public static func fetchAll(for menuUUID: Swift.String, in context: CoreData.NSManagedObjectContext) throws -> [VNOrderData.ItemCategory]
  public static func fetchAllModifiers(for menuUUID: Swift.String, in context: CoreData.NSManagedObjectContext) throws -> [VNOrderData.ItemCategory]
  public static func fetchByName(with name: Swift.String, createIfNecessary: Swift.Bool = true, in context: CoreData.NSManagedObjectContext) throws -> VNOrderData.ItemCategory
}
extension Cart {
  public func jsonDescription(for productType: VNCore.ProductType, isSeasonTicketHolder: Swift.Bool) -> [[Swift.String : Any]]?
  public func jsonDescriptionForLineItemsRaw() -> [[Swift.String : Any]]?
  public func modifiersForLineItemsRaw(for menuItemUUID: Swift.String) -> [[Swift.String : Any]]?
  public var merchantId: Swift.String? {
    get
  }
}
extension Sale {
  public enum GroupType {
    case all
    case seasonTicketHolder
    case preferredCreditCard
    case geoExclusive
    case unknown
    public static func == (a: VNOrderData.Sale.GroupType, b: VNOrderData.Sale.GroupType) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public func groupType() -> VNOrderData.Sale.GroupType
}
extension Seat {
  public static func fetch(with revenueCenterIdentifier: Swift.String, createIfNecessary: Swift.Bool = true, in context: CoreData.NSManagedObjectContext) throws -> VNOrderData.Seat
  public static func fetch(for revenueCenterIdentifier: Swift.String, in context: CoreData.NSManagedObjectContext) -> VNOrderData.Seat?
  public static func fetch(for section: Swift.String, row: Swift.String, seat: Swift.String, in context: CoreData.NSManagedObjectContext) -> VNOrderData.Seat?
  public static func fetchAll(in context: CoreData.NSManagedObjectContext) throws -> [VNOrderData.Seat]
  public static func deleteAll(in context: CoreData.NSManagedObjectContext) throws
}
extension LineItem {
  public static func fetch(with identifier: Swift.String, createIfNecessary: Swift.Bool = true, in context: CoreData.NSManagedObjectContext) throws -> VNOrderData.LineItem
  public static func fetchDiscountItem(for identifier: Swift.String, createIfNecessary: Swift.Bool = false, in context: CoreData.NSManagedObjectContext) -> VNOrderData.LineItem?
  public static func fetchAll(for orderSummaryIdentifier: Swift.String, createIfNecessary: Swift.Bool = true, in context: CoreData.NSManagedObjectContext) -> [VNOrderData.LineItem]
}
public typealias ItemAndModifiersCollection = [(item: VNOrderData.Item, quantity: Swift.Int, modifierSelections: [VNOrderData.ModifierSelection])]
@objc public class VNOrderData : ObjectiveC.NSObject {
  @objc public static let shared: VNOrderData.VNOrderData
  public var persistentContainer: CoreData.NSPersistentContainer {
    get
    set
  }
  public var managedObjectContext: CoreData.NSManagedObjectContext {
    get
    set
  }
  public var managedObjectContextForTests: CoreData.NSManagedObjectContext {
    get
    set
  }
  public func saveContext() throws
  public var cart: VNOrderData.Cart {
    get
    set
  }
  public var notifier: VNCore.NotifyService<VNOrderData.OrderUpdateNotification>
  @objc deinit
}
extension VNOrderData : VNCore.Notifiable {
  public static var notifierNotificationName: Foundation.Notification.Name {
    get
  }
  public static func notificationName(orderSummary: VNOrderData.OrderSummary) -> Foundation.Notification.Name
  public static func notificationName(identifier: Swift.String) -> Foundation.Notification.Name
  public typealias SocketNotificationType = VNOrderData.OrderUpdateNotification
}
extension VNOrderData {
  @objc dynamic public func reloadStands(completion: ((Swift.Bool, Swift.Error?) -> Swift.Void)? = nil)
  public func requestOrder(with uuid: Swift.String, for productType: VNCore.ProductType, completion: @escaping (Swift.Result<Swift.Bool, VNNetworkService.VNAnyError>) -> Swift.Void)
  public func requestOrderHistory(productType: VNCore.ProductType, completion: ((Swift.Result<Swift.Bool, VNNetworkService.VNAnyError>) -> Swift.Void)? = nil)
  public func requestOrderAheadAvailability(for menu: VNOrderData.Menu, in context: CoreData.NSManagedObjectContext, completion: @escaping ([VNOrderData.RemoteOrderAheadAvailability]) -> Swift.Void)
  public func requestMenuItems(for menu: VNOrderData.Menu, in context: CoreData.NSManagedObjectContext, completion: (() -> Swift.Void)? = nil)
  public func placeOrder(for productType: VNCore.ProductType, paymentMethod: VNPayment.VNPaymentMethodRepresentable?, walletBalance: Swift.Int64? = nil, virtualCurrencyPaymentType: Swift.String? = nil, completion: @escaping (Swift.String?, Swift.Error?) -> Swift.Void)
  public func placeOrderForQRCode(walletBalance: Swift.Int64? = nil, paymentMethod: VNPayment.VNPaymentMethodRepresentable?, virtualCurrencyPaymentType: Swift.String? = nil, completion: @escaping (Swift.String?, Swift.Error?) -> Swift.Void)
  public func updateEmail(for order: VNOrderData.OrderSummary, email: Swift.String, completion: ((VNNetworkService.ResponseError?) -> Swift.Void)? = nil)
  public func reorder(order: VNOrderData.OrderSummary, completion: @escaping (VNOrderData.ReorderStatus) -> Swift.Void)
  public func requestTotals(cart: VNOrderData.Cart, productType: VNCore.ProductType, orderNumber: Swift.String? = nil, couponCode: Swift.String? = nil, qrCode: Swift.String? = nil, completion: ((VNOrderData.Cart?, Swift.Error?) -> Swift.Void)? = nil)
}
public enum ReorderStatus {
  case canReorder(collection: VNOrderData.ItemAndModifiersCollection)
  case itemsNotAvailable(names: [Swift.String], reorderableCollection: VNOrderData.ItemAndModifiersCollection)
  case allItemsNotAvailable
  case responseError(error: VNNetworkService.ResponseError)
}
extension VNOrderData {
  @objc override dynamic public class var classStringName: Swift.String {
    @objc get
  }
}
extension VNOrderData {
  public func deleteAllData(for entityName: Swift.String)
  public func destroy()
}
@objc public class ReloadStandsOperation : VNOrderData.AsyncOperation {
  @objc override dynamic public init()
  @objc deinit
}
extension Cart {
  public func paymentSummaryItems(for productType: VNCore.ProductType) -> [PassKit.PKPaymentSummaryItem]
}
extension Cart {
  public func selectTip(_ tip: VNOrderData.Tip)
  public func getSelectedTip() -> VNOrderData.Tip?
  public func tipAmountInCents() -> Swift.Int64?
  public func grandTotal() -> Swift.Int64
}
extension Variant {
  public func saleTypes(for date: Foundation.Date) -> [VNOrderData.Sale.GroupType]
  public func saleId(for date: Foundation.Date, groupType: VNOrderData.Sale.GroupType) -> Swift.String?
  public func sales(for date: Foundation.Date, matching groupType: VNOrderData.Sale.GroupType) -> [VNOrderData.Sale]
}
extension CartEntry {
  public func jsonDescription() -> [Swift.String : Any]
  public func experienceJsonDescription(isSeasonTicketHolder: Swift.Bool) -> [Swift.String : Any]
}
extension Item {
  public static func fetch(with identifier: Swift.String, createIfNecessary: Swift.Bool = true, in context: CoreData.NSManagedObjectContext) throws -> VNOrderData.Item
  public static func makeFetchedResultsController(for menuUUID: Swift.String, in context: CoreData.NSManagedObjectContext) throws -> CoreData.NSFetchedResultsController<VNOrderData.Item>
  public static func makeExperienceFetchedResultsController(for menu: VNOrderData.Menu, with additionalPredicates: [Foundation.NSPredicate]? = nil, in context: CoreData.NSManagedObjectContext) throws -> CoreData.NSFetchedResultsController<VNOrderData.Item>
  public static func fetchItems(for menu: VNOrderData.Menu, in context: CoreData.NSManagedObjectContext) throws -> [VNOrderData.Item]
  public static func fetchItems(for menu: VNOrderData.Menu, isServiceFeeType: Swift.Bool = false, in context: CoreData.NSManagedObjectContext) throws -> [VNOrderData.Item]
  public static func fetchItems(identifiers: [Swift.String], context: CoreData.NSManagedObjectContext) throws -> [VNOrderData.Item]
}
extension ModifierCartEntry {
  public static func fetch(for modifierItem: VNOrderData.ModifierItem, createIfNecessary: Swift.Bool = true, in context: CoreData.NSManagedObjectContext) throws -> VNOrderData.ModifierCartEntry
}
public class GetOrderTotalsParser {
  @objc deinit
}
@objc public class GetExperienceItemParser : ObjectiveC.NSObject {
  public static func parse(data: Foundation.Data, in context: CoreData.NSManagedObjectContext) throws
  public static func parseExperienceItem(data: [Swift.String : Any], for item: VNOrderData.ExperienceItem, into orderSummary: VNOrderData.OrderSummary?, in context: CoreData.NSManagedObjectContext, byPassId: Swift.Bool = true)
  public static func parseMetaData(data: [[Swift.String : Any]], for experienceItem: VNOrderData.ExperienceItem, in context: CoreData.NSManagedObjectContext)
  @objc override dynamic public init()
  @objc deinit
}
public class GetSeatParser {
  public static func parse(data: Foundation.Data) throws -> [VNOrderData.Seat]
  public static func parseRows(data: Foundation.Data) throws -> [Swift.String]
  public static func parseSeats(data: Foundation.Data) throws -> [VNOrderData.Seat]
  @objc deinit
}
extension ExperienceItem {
  public enum TransferState : Swift.String {
    case completed
    case initiated
    case accepted
    case awarded
    case purchased
    case unknown
    public var stringValue: Swift.String {
      get
    }
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public var transferState: VNOrderData.ExperienceItem.TransferState {
    get
  }
  public var isATransfer: Swift.Bool {
    get
  }
  public var isExpired: Swift.Bool {
    get
  }
  public var hasMetaData: Swift.Bool {
    get
  }
  public var isFutureRedeemable: Swift.Bool {
    get
  }
  public var canTransfer: Swift.Bool {
    get
  }
  public var isPreviousTransfer: Swift.Bool {
    get
  }
  public var isOpenTransfer: Swift.Bool {
    get
  }
}
extension Cart {
  public enum ValidationResult {
    case isValid
    case exceedsCartTotal
    case exceedsMaxLimit
    case exceedsAlcoholLimit
    public static func == (a: VNOrderData.Cart.ValidationResult, b: VNOrderData.Cart.ValidationResult) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public func cartTotal(for productType: VNCore.ProductType) -> Swift.Int64
  public func canAdd(item: VNOrderData.Item, quantity: Swift.Int64, modifier: [VNOrderData.Item]? = nil) -> VNOrderData.Cart.ValidationResult
  public func checkForAlcoholAndGivePermission(item: VNOrderData.Item, quantity: Swift.Int64) -> Swift.Bool
  public func shouldPresentWillClearCartMessage(for item: VNOrderData.Item) -> Swift.Bool
  public func alcoholicCartEntries() -> [VNOrderData.CartEntry]
}
extension Cart {
  public static var _hasPresentedAlcoholWarning: Swift.Bool
  public var hasPresentedAlcoholWarning: Swift.Bool {
    get
    set
  }
}
public class ModifierSelection {
  public init(modifierItem: VNOrderData.ModifierItem, modifierGroup: VNOrderData.ModifierGroup, quantity: Swift.Int64, indexPath: Foundation.IndexPath)
  @objc deinit
}
public class ModifierController {
  final public let managedObjectContext: CoreData.NSManagedObjectContext
  public var modifierGroupSectionContainers: [VNOrderData.ModifierGroupSectionContainer]
  public var modifierSelections: [VNOrderData.ModifierSelection]
  public init(modifierGroupSectionContainers: [VNOrderData.ModifierGroupSectionContainer], in collectionView: UIKit.UICollectionView)
  public func shouldShowQuantityPicker(for indexPath: Foundation.IndexPath) -> Swift.Bool
  public func modifierItem(for indexPath: Foundation.IndexPath) -> VNOrderData.ModifierItem?
  public func shouldSelectItem(at indexPath: Foundation.IndexPath) -> Swift.Bool
  public func updateModifierSelections(for indexPath: Foundation.IndexPath, quantity: Swift.Int64 = 1, completion: ((VNOrderData.ModifierGroupSectionContainer) -> Swift.Void)? = nil)
  public func canAddToCart() -> (permission: Swift.Bool, sections: [Swift.Int64])
  @objc deinit
}
public class ModifierGroupSectionContainer {
  final public let modifierGroup: VNOrderData.ModifierGroup
  public var showsRequired: Swift.Bool
  public init(modifierGroup: VNOrderData.ModifierGroup, showsRequired: Swift.Bool = false)
  @objc deinit
}
extension Sale {
  public static func fetch(with identifier: Swift.String, createIfNecessary: Swift.Bool = true, in context: CoreData.NSManagedObjectContext) throws -> VNOrderData.Sale
}
extension Menu {
  public static func makeFetchedResultsController(in context: CoreData.NSManagedObjectContext, productTypes: [VNCore.ProductType] = ProductType.allCases) -> CoreData.NSFetchedResultsController<VNOrderData.Menu>
  public static func fetch(with identifier: Swift.String, createIfNecessary: Swift.Bool = true, in context: CoreData.NSManagedObjectContext) throws -> VNOrderData.Menu
  public static func fetchAll(for revenueCenterUUID: Swift.String, in context: CoreData.NSManagedObjectContext) throws -> [VNOrderData.Menu]
  public static func fetchAll(productTypes: [VNCore.ProductType] = ProductType.allCases, context: CoreData.NSManagedObjectContext) throws -> [VNOrderData.Menu]
}
@objc public class RemoteLineItem : ObjectiveC.NSObject {
  final public let identifier: Swift.String
  final public let itemIdentifier: Swift.String
  final public let quantity: Swift.Int
  final public let parentLineItemIdentifier: Swift.String?
  public var isModifier: Swift.Bool {
    get
  }
  public init(identifier: Swift.String, itemIdentifier: Swift.String, quantity: Swift.Int = 1, parentLineItemIdentifier: Swift.String? = nil)
  public static func modifiersForParent(_ parent: VNOrderData.RemoteLineItem, modifiers: [VNOrderData.RemoteLineItem]) -> [VNOrderData.RemoteLineItem]?
  @objc override dynamic public init()
  @objc deinit
}
extension Collection where Self.Element : VNOrderData.RemoteLineItem {
  public func separated() -> (items: [Self.Element], modifiers: [Self.Element])
  public func modifierForParent(_ parent: VNOrderData.RemoteLineItem) -> [VNOrderData.RemoteLineItem]?
}
extension CartEntry {
  public func total(for productType: VNCore.ProductType) -> Swift.Int64
}
extension NSFetchedResultsController {
  @objc dynamic public subscript(indexPath: Foundation.IndexPath) -> CoreData.NSManagedObject {
    @objc get
  }
}
extension NSEntityDescription {
  public class func entity<Entity>(for entityClass: Entity.Type, context: CoreData.NSManagedObjectContext) -> CoreData.NSEntityDescription where Entity : CoreData.NSManagedObject
}
extension NSManagedObject {
  @nonobjc public class func batchUpdateRequest() -> CoreData.NSBatchUpdateRequest
}
public protocol EntityMirror {
  static var entityName: Swift.String { get }
}
extension EntityMirror where Self : CoreData.NSManagedObject {
  public static var entityName: Swift.String {
    get
  }
}
extension NSManagedObject : VNOrderData.EntityMirror {
}
extension NSManagedObject {
  @objc public static var coreDataEntityName: Foundation.NSString {
    @objc get
  }
}
extension Array where Element : Swift.Equatable {
  @discardableResult
  mutating public func removeElement(_ element: Element) throws -> Element?
}
extension Array where Element : ObjectiveC.NSObject {
  mutating public func sort(using sortDescriptors: [Foundation.NSSortDescriptor])
}
@objc public class AsyncOperation : Foundation.Operation {
  @objc override dynamic public var isAsynchronous: Swift.Bool {
    @objc get
  }
  @objc override dynamic public var isFinished: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic public var isExecuting: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic public func start()
  @objc override dynamic public init()
  @objc deinit
}
extension Stand {
  public static func fetch(with identifier: Swift.String, createIfNecessary: Swift.Bool = true, in context: CoreData.NSManagedObjectContext) throws -> VNOrderData.Stand
  public static func makeMenuFetchedResultsController(for stand: VNOrderData.Stand, in context: CoreData.NSManagedObjectContext) throws -> CoreData.NSFetchedResultsController<VNOrderData.Menu>
}
@objc(Cart) public class Cart : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Cart {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<VNOrderData.Cart>
  @objc @NSManaged dynamic public var deliveryFeeInCents: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var discountAmountInCents: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var identifier: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lineItemsRaw: [[Swift.String : Any]]? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var orderNumber: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var orderUUID: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var promoCode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var serviceChargeInCents: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sourceDeviceID: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var taxInCents: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var totalAmountInCents: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var userEmail: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var userFullName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var cartEntries: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var menu: VNOrderData.Menu? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var stand: VNOrderData.Stand? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var tips: Foundation.NSOrderedSet? {
    @objc get
    @objc set
  }
}
extension Cart {
  @objc(addCartEntriesObject:) @NSManaged dynamic public func addToCartEntries(_ value: VNOrderData.CartEntry)
  @objc(removeCartEntriesObject:) @NSManaged dynamic public func removeFromCartEntries(_ value: VNOrderData.CartEntry)
  @objc(addCartEntries:) @NSManaged dynamic public func addToCartEntries(_ values: Foundation.NSSet)
  @objc(removeCartEntries:) @NSManaged dynamic public func removeFromCartEntries(_ values: Foundation.NSSet)
}
extension Cart {
  @objc(insertObject:inTipsAtIndex:) @NSManaged dynamic public func insertIntoTips(_ value: VNOrderData.Tip, at idx: Swift.Int)
  @objc(removeObjectFromTipsAtIndex:) @NSManaged dynamic public func removeFromTips(at idx: Swift.Int)
  @objc(insertTips:atIndexes:) @NSManaged dynamic public func insertIntoTips(_ values: [VNOrderData.Tip], at indexes: Foundation.NSIndexSet)
  @objc(removeTipsAtIndexes:) @NSManaged dynamic public func removeFromTips(at indexes: Foundation.NSIndexSet)
  @objc(replaceObjectInTipsAtIndex:withObject:) @NSManaged dynamic public func replaceTips(at idx: Swift.Int, with value: VNOrderData.Tip)
  @objc(replaceTipsAtIndexes:withTips:) @NSManaged dynamic public func replaceTips(at indexes: Foundation.NSIndexSet, with values: [VNOrderData.Tip])
  @objc(addTipsObject:) @NSManaged dynamic public func addToTips(_ value: VNOrderData.Tip)
  @objc(removeTipsObject:) @NSManaged dynamic public func removeFromTips(_ value: VNOrderData.Tip)
  @objc(addTips:) @NSManaged dynamic public func addToTips(_ values: Foundation.NSOrderedSet)
  @objc(removeTips:) @NSManaged dynamic public func removeFromTips(_ values: Foundation.NSOrderedSet)
}
@objc(CartEntry) public class CartEntry : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension CartEntry {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<VNOrderData.CartEntry>
  @objc @NSManaged dynamic public var metadata: [[Swift.String : Any]]? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var quantity: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var cart: VNOrderData.Cart? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var event: VNOrderData.ExperienceEvent? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var item: VNOrderData.Item? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var modifierCartEntries: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension CartEntry {
  @objc(addModifierCartEntriesObject:) @NSManaged dynamic public func addToModifierCartEntries(_ value: VNOrderData.ModifierCartEntry)
  @objc(removeModifierCartEntriesObject:) @NSManaged dynamic public func removeFromModifierCartEntries(_ value: VNOrderData.ModifierCartEntry)
  @objc(addModifierCartEntries:) @NSManaged dynamic public func addToModifierCartEntries(_ values: Foundation.NSSet)
  @objc(removeModifierCartEntries:) @NSManaged dynamic public func removeFromModifierCartEntries(_ values: Foundation.NSSet)
}
@objc(ExperienceEvent) public class ExperienceEvent : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension ExperienceEvent {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<VNOrderData.ExperienceEvent>
  @objc @NSManaged dynamic public var date: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var dateText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var descriptionText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var displayDate: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var homeAbbreviation: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var homeCity: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var homeName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var identifier: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var shortDescriptionText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var specialEventText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timeText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timeToBeDecided: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timeZone: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var visitingAbbreviation: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var visitingCity: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var visitingName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var cartEntries: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var menu: VNOrderData.Menu? {
    @objc get
    @objc set
  }
}
extension ExperienceEvent {
  @objc(addCartEntriesObject:) @NSManaged dynamic public func addToCartEntries(_ value: VNOrderData.CartEntry)
  @objc(removeCartEntriesObject:) @NSManaged dynamic public func removeFromCartEntries(_ value: VNOrderData.CartEntry)
  @objc(addCartEntries:) @NSManaged dynamic public func addToCartEntries(_ values: Foundation.NSSet)
  @objc(removeCartEntries:) @NSManaged dynamic public func removeFromCartEntries(_ values: Foundation.NSSet)
}
@objc(ExperienceItem) public class ExperienceItem : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension ExperienceItem {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<VNOrderData.ExperienceItem>
  @objc @NSManaged dynamic public var activeTransferUUID: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var availableAt: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var countdownSeconds: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var createdAt: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var descriptionText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var eventDate: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var eventUUID: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var expiresAt: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var globalItemUUID: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var hiddenAt: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var identifier: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var imageURL: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var instructionText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isRedeemable: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isRefundable: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isTransferable: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var itemUUID: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var recipientEmail: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var redeemedAt: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var redemptionCode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var redemptionStartsAt: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var redemptionType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var state: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var usedAt: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var value: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var metadata: Foundation.NSOrderedSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var orderSummary: VNOrderData.OrderSummary? {
    @objc get
    @objc set
  }
}
extension ExperienceItem {
  @objc(insertObject:inMetadataAtIndex:) @NSManaged dynamic public func insertIntoMetadata(_ value: VNOrderData.Metadata, at idx: Swift.Int)
  @objc(removeObjectFromMetadataAtIndex:) @NSManaged dynamic public func removeFromMetadata(at idx: Swift.Int)
  @objc(insertMetadata:atIndexes:) @NSManaged dynamic public func insertIntoMetadata(_ values: [VNOrderData.Metadata], at indexes: Foundation.NSIndexSet)
  @objc(removeMetadataAtIndexes:) @NSManaged dynamic public func removeFromMetadata(at indexes: Foundation.NSIndexSet)
  @objc(replaceObjectInMetadataAtIndex:withObject:) @NSManaged dynamic public func replaceMetadata(at idx: Swift.Int, with value: VNOrderData.Metadata)
  @objc(replaceMetadataAtIndexes:withMetadata:) @NSManaged dynamic public func replaceMetadata(at indexes: Foundation.NSIndexSet, with values: [VNOrderData.Metadata])
  @objc(addMetadataObject:) @NSManaged dynamic public func addToMetadata(_ value: VNOrderData.Metadata)
  @objc(removeMetadataObject:) @NSManaged dynamic public func removeFromMetadata(_ value: VNOrderData.Metadata)
  @objc(addMetadata:) @NSManaged dynamic public func addToMetadata(_ values: Foundation.NSOrderedSet)
  @objc(removeMetadata:) @NSManaged dynamic public func removeFromMetadata(_ values: Foundation.NSOrderedSet)
}
@objc(Item) public class Item : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Item {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<VNOrderData.Item>
  @objc @NSManaged dynamic public var categoryUUID: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var comboMeal: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var defaultPriceInCents: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var descriptionText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var identifier: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var imageURL: Foundation.URL? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ingredients: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isAlcohol: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isModifier: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isServiceFeeItem: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var marketingDescriptionText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var orderMaxAmount: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var qrCode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sortIndex: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var cartEntry: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var itemCategory: VNOrderData.ItemCategory? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var menu: VNOrderData.Menu? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var metadata: Foundation.NSOrderedSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var modifierGroups: Foundation.NSOrderedSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var variants: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension Item {
  @objc(addCartEntryObject:) @NSManaged dynamic public func addToCartEntry(_ value: VNOrderData.CartEntry)
  @objc(removeCartEntryObject:) @NSManaged dynamic public func removeFromCartEntry(_ value: VNOrderData.CartEntry)
  @objc(addCartEntry:) @NSManaged dynamic public func addToCartEntry(_ values: Foundation.NSSet)
  @objc(removeCartEntry:) @NSManaged dynamic public func removeFromCartEntry(_ values: Foundation.NSSet)
}
extension Item {
  @objc(insertObject:inMetadataAtIndex:) @NSManaged dynamic public func insertIntoMetadata(_ value: VNOrderData.Metadata, at idx: Swift.Int)
  @objc(removeObjectFromMetadataAtIndex:) @NSManaged dynamic public func removeFromMetadata(at idx: Swift.Int)
  @objc(insertMetadata:atIndexes:) @NSManaged dynamic public func insertIntoMetadata(_ values: [VNOrderData.Metadata], at indexes: Foundation.NSIndexSet)
  @objc(removeMetadataAtIndexes:) @NSManaged dynamic public func removeFromMetadata(at indexes: Foundation.NSIndexSet)
  @objc(replaceObjectInMetadataAtIndex:withObject:) @NSManaged dynamic public func replaceMetadata(at idx: Swift.Int, with value: VNOrderData.Metadata)
  @objc(replaceMetadataAtIndexes:withMetadata:) @NSManaged dynamic public func replaceMetadata(at indexes: Foundation.NSIndexSet, with values: [VNOrderData.Metadata])
  @objc(addMetadataObject:) @NSManaged dynamic public func addToMetadata(_ value: VNOrderData.Metadata)
  @objc(removeMetadataObject:) @NSManaged dynamic public func removeFromMetadata(_ value: VNOrderData.Metadata)
  @objc(addMetadata:) @NSManaged dynamic public func addToMetadata(_ values: Foundation.NSOrderedSet)
  @objc(removeMetadata:) @NSManaged dynamic public func removeFromMetadata(_ values: Foundation.NSOrderedSet)
}
extension Item {
  @objc(insertObject:inModifierGroupsAtIndex:) @NSManaged dynamic public func insertIntoModifierGroups(_ value: VNOrderData.ModifierGroup, at idx: Swift.Int)
  @objc(removeObjectFromModifierGroupsAtIndex:) @NSManaged dynamic public func removeFromModifierGroups(at idx: Swift.Int)
  @objc(insertModifierGroups:atIndexes:) @NSManaged dynamic public func insertIntoModifierGroups(_ values: [VNOrderData.ModifierGroup], at indexes: Foundation.NSIndexSet)
  @objc(removeModifierGroupsAtIndexes:) @NSManaged dynamic public func removeFromModifierGroups(at indexes: Foundation.NSIndexSet)
  @objc(replaceObjectInModifierGroupsAtIndex:withObject:) @NSManaged dynamic public func replaceModifierGroups(at idx: Swift.Int, with value: VNOrderData.ModifierGroup)
  @objc(replaceModifierGroupsAtIndexes:withModifierGroups:) @NSManaged dynamic public func replaceModifierGroups(at indexes: Foundation.NSIndexSet, with values: [VNOrderData.ModifierGroup])
  @objc(addModifierGroupsObject:) @NSManaged dynamic public func addToModifierGroups(_ value: VNOrderData.ModifierGroup)
  @objc(removeModifierGroupsObject:) @NSManaged dynamic public func removeFromModifierGroups(_ value: VNOrderData.ModifierGroup)
  @objc(addModifierGroups:) @NSManaged dynamic public func addToModifierGroups(_ values: Foundation.NSOrderedSet)
  @objc(removeModifierGroups:) @NSManaged dynamic public func removeFromModifierGroups(_ values: Foundation.NSOrderedSet)
}
extension Item {
  @objc(addVariantsObject:) @NSManaged dynamic public func addToVariants(_ value: VNOrderData.Variant)
  @objc(removeVariantsObject:) @NSManaged dynamic public func removeFromVariants(_ value: VNOrderData.Variant)
  @objc(addVariants:) @NSManaged dynamic public func addToVariants(_ values: Foundation.NSSet)
  @objc(removeVariants:) @NSManaged dynamic public func removeFromVariants(_ values: Foundation.NSSet)
}
@objc(ItemCategory) public class ItemCategory : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension ItemCategory {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<VNOrderData.ItemCategory>
  @objc @NSManaged dynamic public var categoryType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var featured: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var identifier: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var imageURL: Foundation.URL? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isModifier: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sortOrder: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var items: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var menu: VNOrderData.Menu? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var stand: VNOrderData.Stand? {
    @objc get
    @objc set
  }
}
extension ItemCategory {
  @objc(addItemsObject:) @NSManaged dynamic public func addToItems(_ value: VNOrderData.Item)
  @objc(removeItemsObject:) @NSManaged dynamic public func removeFromItems(_ value: VNOrderData.Item)
  @objc(addItems:) @NSManaged dynamic public func addToItems(_ values: Foundation.NSSet)
  @objc(removeItems:) @NSManaged dynamic public func removeFromItems(_ values: Foundation.NSSet)
}
@objc(LineItem) public class LineItem : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension LineItem {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<VNOrderData.LineItem>
  @objc @NSManaged dynamic public var eventUUID: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var identifier: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isAlcohol: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var itemUUID: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var menuItemUUID: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var parentLineItemUUID: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var paymentType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var price: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var productSKU: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var quantity: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var specialType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var taxAmountInCents: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var total: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var totalAmountInCents: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var type: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var modifiers: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var orderSummary: VNOrderData.OrderSummary? {
    @objc get
    @objc set
  }
}
extension LineItem {
  @objc(addModifiersObject:) @NSManaged dynamic public func addToModifiers(_ value: VNOrderData.ModifierLineItem)
  @objc(removeModifiersObject:) @NSManaged dynamic public func removeFromModifiers(_ value: VNOrderData.ModifierLineItem)
  @objc(addModifiers:) @NSManaged dynamic public func addToModifiers(_ values: Foundation.NSSet)
  @objc(removeModifiers:) @NSManaged dynamic public func removeFromModifiers(_ values: Foundation.NSSet)
}
@objc(Menu) public class Menu : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Menu {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<VNOrderData.Menu>
  @objc @NSManaged dynamic public var alcoholLimit: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var alcoholLimitMessage: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var canOrderAhead: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var canOrderNow: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var descriptionText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var hasAlcohol: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var identifier: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var imageURL: Foundation.URL? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isAvailible: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var longDescriptionText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var maxOrderAmountInDollars: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var menuDescription: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var serviceType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var shortDescriptionText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var taxRate: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var usesQRCode: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var cart: VNOrderData.Cart? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var categories: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var events: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var items: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var stand: VNOrderData.Stand? {
    @objc get
    @objc set
  }
}
extension Menu {
  @objc(addCategoriesObject:) @NSManaged dynamic public func addToCategories(_ value: VNOrderData.ItemCategory)
  @objc(removeCategoriesObject:) @NSManaged dynamic public func removeFromCategories(_ value: VNOrderData.ItemCategory)
  @objc(addCategories:) @NSManaged dynamic public func addToCategories(_ values: Foundation.NSSet)
  @objc(removeCategories:) @NSManaged dynamic public func removeFromCategories(_ values: Foundation.NSSet)
}
extension Menu {
  @objc(addEventsObject:) @NSManaged dynamic public func addToEvents(_ value: VNOrderData.ExperienceEvent)
  @objc(removeEventsObject:) @NSManaged dynamic public func removeFromEvents(_ value: VNOrderData.ExperienceEvent)
  @objc(addEvents:) @NSManaged dynamic public func addToEvents(_ values: Foundation.NSSet)
  @objc(removeEvents:) @NSManaged dynamic public func removeFromEvents(_ values: Foundation.NSSet)
}
extension Menu {
  @objc(addItemsObject:) @NSManaged dynamic public func addToItems(_ value: VNOrderData.Item)
  @objc(removeItemsObject:) @NSManaged dynamic public func removeFromItems(_ value: VNOrderData.Item)
  @objc(addItems:) @NSManaged dynamic public func addToItems(_ values: Foundation.NSSet)
  @objc(removeItems:) @NSManaged dynamic public func removeFromItems(_ values: Foundation.NSSet)
}
@objc(Metadata) public class Metadata : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Metadata {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<VNOrderData.Metadata>
  @objc @NSManaged dynamic public var dataType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var descriptionText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var errorMessage: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var hasRestriction: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var identifier: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var maxValue: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var minValue: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var operatorText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var value: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var experienceItem: VNOrderData.ExperienceItem? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var item: VNOrderData.Item? {
    @objc get
    @objc set
  }
}
@objc(ModifierCartEntry) public class ModifierCartEntry : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension ModifierCartEntry {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<VNOrderData.ModifierCartEntry>
  @objc @NSManaged dynamic public var identifier: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var quantity: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var secondaryPriceThresholdCount: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var cartEntries: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var modifierGroup: VNOrderData.ModifierGroup? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var modifierItem: VNOrderData.ModifierItem? {
    @objc get
    @objc set
  }
}
extension ModifierCartEntry {
  @objc(addCartEntriesObject:) @NSManaged dynamic public func addToCartEntries(_ value: VNOrderData.CartEntry)
  @objc(removeCartEntriesObject:) @NSManaged dynamic public func removeFromCartEntries(_ value: VNOrderData.CartEntry)
  @objc(addCartEntries:) @NSManaged dynamic public func addToCartEntries(_ values: Foundation.NSSet)
  @objc(removeCartEntries:) @NSManaged dynamic public func removeFromCartEntries(_ values: Foundation.NSSet)
}
@objc(ModifierGroup) public class ModifierGroup : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension ModifierGroup {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<VNOrderData.ModifierGroup>
  @objc @NSManaged dynamic public var identifier: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isRequiredSelectionMet: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var itemIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var maximumSelectionCount: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var minimumSelectionCount: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var requiresSelection: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var secondaryPriceThresholdCount: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sortIndex: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var items: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var modifierCartEntries: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var modifierItems: Foundation.NSOrderedSet? {
    @objc get
    @objc set
  }
}
extension ModifierGroup {
  @objc(addItemsObject:) @NSManaged dynamic public func addToItems(_ value: VNOrderData.Item)
  @objc(removeItemsObject:) @NSManaged dynamic public func removeFromItems(_ value: VNOrderData.Item)
  @objc(addItems:) @NSManaged dynamic public func addToItems(_ values: Foundation.NSSet)
  @objc(removeItems:) @NSManaged dynamic public func removeFromItems(_ values: Foundation.NSSet)
}
extension ModifierGroup {
  @objc(addModifierCartEntriesObject:) @NSManaged dynamic public func addToModifierCartEntries(_ value: VNOrderData.ModifierCartEntry)
  @objc(removeModifierCartEntriesObject:) @NSManaged dynamic public func removeFromModifierCartEntries(_ value: VNOrderData.ModifierCartEntry)
  @objc(addModifierCartEntries:) @NSManaged dynamic public func addToModifierCartEntries(_ values: Foundation.NSSet)
  @objc(removeModifierCartEntries:) @NSManaged dynamic public func removeFromModifierCartEntries(_ values: Foundation.NSSet)
}
extension ModifierGroup {
  @objc(insertObject:inModifierItemsAtIndex:) @NSManaged dynamic public func insertIntoModifierItems(_ value: VNOrderData.ModifierItem, at idx: Swift.Int)
  @objc(removeObjectFromModifierItemsAtIndex:) @NSManaged dynamic public func removeFromModifierItems(at idx: Swift.Int)
  @objc(insertModifierItems:atIndexes:) @NSManaged dynamic public func insertIntoModifierItems(_ values: [VNOrderData.ModifierItem], at indexes: Foundation.NSIndexSet)
  @objc(removeModifierItemsAtIndexes:) @NSManaged dynamic public func removeFromModifierItems(at indexes: Foundation.NSIndexSet)
  @objc(replaceObjectInModifierItemsAtIndex:withObject:) @NSManaged dynamic public func replaceModifierItems(at idx: Swift.Int, with value: VNOrderData.ModifierItem)
  @objc(replaceModifierItemsAtIndexes:withModifierItems:) @NSManaged dynamic public func replaceModifierItems(at indexes: Foundation.NSIndexSet, with values: [VNOrderData.ModifierItem])
  @objc(addModifierItemsObject:) @NSManaged dynamic public func addToModifierItems(_ value: VNOrderData.ModifierItem)
  @objc(removeModifierItemsObject:) @NSManaged dynamic public func removeFromModifierItems(_ value: VNOrderData.ModifierItem)
  @objc(addModifierItems:) @NSManaged dynamic public func addToModifierItems(_ values: Foundation.NSOrderedSet)
  @objc(removeModifierItems:) @NSManaged dynamic public func removeFromModifierItems(_ values: Foundation.NSOrderedSet)
}
@objc(ModifierItem) public class ModifierItem : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension ModifierItem {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<VNOrderData.ModifierItem>
  @objc @NSManaged dynamic public var categoryUUID: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var comboMeal: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var defaultPriceInCents: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var descriptionText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var identifier: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var imageURL: Foundation.URL? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ingredients: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isAlcohol: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isModifier: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isServiceFeeItem: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var marketingDescriptionText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var orderMaxAmount: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var qrCode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sortIndex: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var modifierCartEntries: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var modifierGroups: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var variants: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension ModifierItem {
  @objc(addModifierCartEntriesObject:) @NSManaged dynamic public func addToModifierCartEntries(_ value: VNOrderData.ModifierCartEntry)
  @objc(removeModifierCartEntriesObject:) @NSManaged dynamic public func removeFromModifierCartEntries(_ value: VNOrderData.ModifierCartEntry)
  @objc(addModifierCartEntries:) @NSManaged dynamic public func addToModifierCartEntries(_ values: Foundation.NSSet)
  @objc(removeModifierCartEntries:) @NSManaged dynamic public func removeFromModifierCartEntries(_ values: Foundation.NSSet)
}
extension ModifierItem {
  @objc(addModifierGroupsObject:) @NSManaged dynamic public func addToModifierGroups(_ value: VNOrderData.ModifierGroup)
  @objc(removeModifierGroupsObject:) @NSManaged dynamic public func removeFromModifierGroups(_ value: VNOrderData.ModifierGroup)
  @objc(addModifierGroups:) @NSManaged dynamic public func addToModifierGroups(_ values: Foundation.NSSet)
  @objc(removeModifierGroups:) @NSManaged dynamic public func removeFromModifierGroups(_ values: Foundation.NSSet)
}
extension ModifierItem {
  @objc(addVariantsObject:) @NSManaged dynamic public func addToVariants(_ value: VNOrderData.Variant)
  @objc(removeVariantsObject:) @NSManaged dynamic public func removeFromVariants(_ value: VNOrderData.Variant)
  @objc(addVariants:) @NSManaged dynamic public func addToVariants(_ values: Foundation.NSSet)
  @objc(removeVariants:) @NSManaged dynamic public func removeFromVariants(_ values: Foundation.NSSet)
}
@objc(ModifierLineItem) public class ModifierLineItem : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension ModifierLineItem {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<VNOrderData.ModifierLineItem>
  @objc @NSManaged dynamic public var identifier: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isAlcohol: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var menuItemUUID: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var price: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var productSKU: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var quantity: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var parentLineItem: VNOrderData.LineItem? {
    @objc get
    @objc set
  }
}
@objc(OrderSummary) public class OrderSummary : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension OrderSummary {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<VNOrderData.OrderSummary>
  @objc @NSManaged dynamic public var canceledAt: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var createdAt: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var creditCardType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var deliveryFee: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var discountAmountInCents: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var email: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var eventUUID: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var fulfillmentDate: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var fulfillmentSlot: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var hasQRCode: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var identifier: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var instructionsText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isCancellable: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isUserRefundable: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var itemNames: [Swift.String]? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lastFour: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lineItemCount: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var orderLocation: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var orderNumber: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var paymentAuthorizedAt: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var paymentRefundedAt: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var paymentSettledAt: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var paymentVoidedAt: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var productType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var quantity: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var refundedAt: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var revenueCenterMenuUUID: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var revenueCenterName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var revenueCenterUUID: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var row: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var seat: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var section: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var serviceCharge: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var state: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var stateDescription: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var stateDisplayName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var subtotal: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var success: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var tax: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var taxRate: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var tip: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var total: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var totalsWithPaymentType: [Swift.String : Any]? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var type: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var updatedAt: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var usageType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var userNotes: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var userUUID: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var experienceItems: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lineItems: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension OrderSummary {
  @objc(addExperienceItemsObject:) @NSManaged dynamic public func addToExperienceItems(_ value: VNOrderData.ExperienceItem)
  @objc(removeExperienceItemsObject:) @NSManaged dynamic public func removeFromExperienceItems(_ value: VNOrderData.ExperienceItem)
  @objc(addExperienceItems:) @NSManaged dynamic public func addToExperienceItems(_ values: Foundation.NSSet)
  @objc(removeExperienceItems:) @NSManaged dynamic public func removeFromExperienceItems(_ values: Foundation.NSSet)
}
extension OrderSummary {
  @objc(addLineItemsObject:) @NSManaged dynamic public func addToLineItems(_ value: VNOrderData.LineItem)
  @objc(removeLineItemsObject:) @NSManaged dynamic public func removeFromLineItems(_ value: VNOrderData.LineItem)
  @objc(addLineItems:) @NSManaged dynamic public func addToLineItems(_ values: Foundation.NSSet)
  @objc(removeLineItems:) @NSManaged dynamic public func removeFromLineItems(_ values: Foundation.NSSet)
}
@objc(Payment) public class Payment : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Payment {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<VNOrderData.Payment>
  @objc @NSManaged dynamic public var taxAmountInCents: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var totalAmountInCents: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var type: Swift.String? {
    @objc get
    @objc set
  }
}
@objc(Sale) public class Sale : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Sale {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<VNOrderData.Sale>
  @objc @NSManaged dynamic public var distance_threshold: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ends_at: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var group: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var identifier: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var item_identifier: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var label: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lat: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var long: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var price: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var starts_at: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var variant: VNOrderData.Variant? {
    @objc get
    @objc set
  }
}
@objc(Seat) public class Seat : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Seat {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<VNOrderData.Seat>
  @objc @NSManaged dynamic public var aisleIdentifiers: [Swift.Int]? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var created: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var identifier: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isSuite: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var revenueCenterIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var row: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var seat: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var section: Swift.String? {
    @objc get
    @objc set
  }
}
@objc(Stand) public class Stand : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Stand {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<VNOrderData.Stand>
  @objc @NSManaged dynamic public var alcoholLimitMessage: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var alcoholWarningMessage: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var identifier: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var imageURL: Foundation.URL? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var longDescriptionText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var productType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var serviceTypes: [Swift.String]? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var shortDescriptionText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sortIndex: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var venueDisplayName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var venueOrganizationName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var venueSortOrder: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var cart: VNOrderData.Cart? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var itemCategories: Foundation.NSOrderedSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var menus: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension Stand {
  @objc(insertObject:inItemCategoriesAtIndex:) @NSManaged dynamic public func insertIntoItemCategories(_ value: VNOrderData.ItemCategory, at idx: Swift.Int)
  @objc(removeObjectFromItemCategoriesAtIndex:) @NSManaged dynamic public func removeFromItemCategories(at idx: Swift.Int)
  @objc(insertItemCategories:atIndexes:) @NSManaged dynamic public func insertIntoItemCategories(_ values: [VNOrderData.ItemCategory], at indexes: Foundation.NSIndexSet)
  @objc(removeItemCategoriesAtIndexes:) @NSManaged dynamic public func removeFromItemCategories(at indexes: Foundation.NSIndexSet)
  @objc(replaceObjectInItemCategoriesAtIndex:withObject:) @NSManaged dynamic public func replaceItemCategories(at idx: Swift.Int, with value: VNOrderData.ItemCategory)
  @objc(replaceItemCategoriesAtIndexes:withItemCategories:) @NSManaged dynamic public func replaceItemCategories(at indexes: Foundation.NSIndexSet, with values: [VNOrderData.ItemCategory])
  @objc(addItemCategoriesObject:) @NSManaged dynamic public func addToItemCategories(_ value: VNOrderData.ItemCategory)
  @objc(removeItemCategoriesObject:) @NSManaged dynamic public func removeFromItemCategories(_ value: VNOrderData.ItemCategory)
  @objc(addItemCategories:) @NSManaged dynamic public func addToItemCategories(_ values: Foundation.NSOrderedSet)
  @objc(removeItemCategories:) @NSManaged dynamic public func removeFromItemCategories(_ values: Foundation.NSOrderedSet)
}
extension Stand {
  @objc(addMenusObject:) @NSManaged dynamic public func addToMenus(_ value: VNOrderData.Menu)
  @objc(removeMenusObject:) @NSManaged dynamic public func removeFromMenus(_ value: VNOrderData.Menu)
  @objc(addMenus:) @NSManaged dynamic public func addToMenus(_ values: Foundation.NSSet)
  @objc(removeMenus:) @NSManaged dynamic public func removeFromMenus(_ values: Foundation.NSSet)
}
@objc(Tip) public class Tip : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Tip {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<VNOrderData.Tip>
  @objc @NSManaged dynamic public var amountInCents: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var displayText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isCustom: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var cart: VNOrderData.Cart? {
    @objc get
    @objc set
  }
}
@objc(Variant) public class Variant : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Variant {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<VNOrderData.Variant>
  @objc @NSManaged dynamic public var availableAt: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var categoryName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var defaultQuantity: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var eventName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var eventUUID: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var experiencePrice: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var expiresAt: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var globaltemId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var identifier: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var inventoryState: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isModifier: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var linkedMenuItemIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var merchantId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var onHandQuantity: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var priceAfterThresholdInCents: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var priceInCents: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var productSKU: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var purchaseLimit: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var redemptionStartsAt: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var saleId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var saleIds: [Foundation.NSString]? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var item: VNOrderData.Item? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var modifierItem: VNOrderData.ModifierItem? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sales: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension Variant {
  @objc(addSalesObject:) @NSManaged dynamic public func addToSales(_ value: VNOrderData.Sale)
  @objc(removeSalesObject:) @NSManaged dynamic public func removeFromSales(_ value: VNOrderData.Sale)
  @objc(addSales:) @NSManaged dynamic public func addToSales(_ values: Foundation.NSSet)
  @objc(removeSales:) @NSManaged dynamic public func removeFromSales(_ values: Foundation.NSSet)
}
@objc(Venue) public class Venue : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Venue {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<VNOrderData.Venue>
  @objc @NSManaged dynamic public var displayName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var organizationName: Swift.String? {
    @objc get
    @objc set
  }
}
extension VNOrderData.OrderSummary.FoodOpenStates : Swift.Equatable {}
extension VNOrderData.OrderSummary.FoodOpenStates : Swift.Hashable {}
extension VNOrderData.OrderSummary.FoodOpenStates : Swift.RawRepresentable {}
extension VNOrderData.OrderSummary.ExperienceOpenStates : Swift.Equatable {}
extension VNOrderData.OrderSummary.ExperienceOpenStates : Swift.Hashable {}
extension VNOrderData.OrderSummary.ExperienceOpenStates : Swift.RawRepresentable {}
extension VNOrderData.Sale.GroupType : Swift.Equatable {}
extension VNOrderData.Sale.GroupType : Swift.Hashable {}
extension VNOrderData.ExperienceItem.TransferState : Swift.Hashable {}
extension VNOrderData.ExperienceItem.TransferState : Swift.RawRepresentable {}
extension VNOrderData.Cart.ValidationResult : Swift.Equatable {}
extension VNOrderData.Cart.ValidationResult : Swift.Hashable {}
