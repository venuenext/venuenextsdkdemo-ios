// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name VNWalletUI
import AVFoundation
import Foundation
import Swift
import UIKit
import VNCore
import VNCoreUI
import VNOrderService
import VNOrderUI
import VNPayment
import VNWalletData
import VNWalletService
@_exported import VNWalletUI
import os.log
import os
extension VNWallet : VNCore.VNWalletProtocol {
  public func isVirtualCurrencyEnabled(for productType: VNCore.ProductType? = nil) -> Swift.Bool
  public func logout()
  public func isWalletEnvironmentAvailable() -> Swift.Bool
  public func virtualCurrencyPaymentType() -> Swift.String
  public func formatBalanceInDollars(balance: Swift.Double) -> Swift.String
  public var currencyName: Swift.String {
    get
  }
  public var isLoggedIn: Swift.Bool {
    get
  }
  public func getBalance(completion: @escaping (Foundation.NSNumber?, Swift.Error?) -> Swift.Void)
  public func showLogin(on controller: UIKit.UINavigationController, finish: @escaping (Swift.Bool, Swift.Error?) -> Swift.Void)
}
public struct LoyaltyUpdateNotification : VNCore.SocketNotification, Swift.Decodable {
  public static func parse(json: [Swift.String : Any]) -> VNWalletUI.LoyaltyUpdateNotification?
  public init(from decoder: Swift.Decoder) throws
}
extension UINavigationController {
  @objc dynamic public func pushVNWalletViewController(animated: Swift.Bool)
}
@objc public class VNWallet : ObjectiveC.NSObject {
  @objc public static let shared: VNWalletUI.VNWallet
  @objc public var delegate: VNWalletUI.VNWalletDelegate! {
    get
    }
  public static var theme: VNCore.VNWalletThemable {
    get
    }
  public var walletModes: [VNCore.VNWalletMode] {
    get
  }
  public func configure(walletDelegate: Any, theme: VNCore.VNWalletThemable?)
  public func configure(walletConfig: VNCore.VNWalletConfig)
  @objc override dynamic public init()
  @objc deinit
}
public typealias WalletRoutes = VNCore.DeepLinkRoute.WalletRoutes
extension DeepLinkRoute {
  public enum WalletRoutes : Swift.String, Swift.CaseIterable {
    case transfer
    case transferOld
    case login
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public typealias AllCases = [VNCore.DeepLinkRoute.WalletRoutes]
    public static var allCases: [VNCore.DeepLinkRoute.WalletRoutes] {
      get
    }
  }
}
@objc public protocol VNWalletDelegate {
  @objc func loginController(completion: @escaping (VNCore.VNWalletUser?, Swift.String?, Foundation.NSError?) -> Swift.Void) -> UIKit.UIViewController
  @objc func walletUser() -> VNCore.VNWalletUser?
}
extension VNWallet : VNCore.VNDeepLinkable {
  public func route<T>(for url: Foundation.URL) -> T? where T : Swift.RawRepresentable, T.RawValue == Swift.String
  public func canHandle(url: Foundation.URL) -> Swift.Bool
  public func handle(url: Foundation.URL, presenter: UIKit.UIViewController, completion: ((Swift.Bool) -> Swift.Void)?)
}
@objc public class VNWalletNavigation : ObjectiveC.NSObject {
  @objc public static func walletNavigationController(dismissDelegate: VNCoreUI.DismissDelegate?) -> UIKit.UINavigationController
  @objc override dynamic public init()
  @objc deinit
}
@objc open class PresentableNavigationController : UIKit.UINavigationController, VNCoreUI.Presentable {
  weak public var dismissDelegate: VNCoreUI.DismissDelegate?
  @objc public init(rootViewController: UIKit.UIViewController, dismissDelegate: VNCoreUI.DismissDelegate?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @available(iOS 5.0, *)
  @objc override dynamic public init(navigationBarClass: Swift.AnyClass?, toolbarClass: Swift.AnyClass?)
  @objc override dynamic public init(rootViewController: UIKit.UIViewController)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc deinit
}
@objc public enum WalletMode : Swift.Int, Swift.CaseIterable {
  case qrCode
  case qrScanner
  case virtualCurrencyToggle
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
  public typealias AllCases = [VNWalletUI.WalletMode]
  public static var allCases: [VNWalletUI.WalletMode] {
    get
  }
}
extension UINavigationController {
  @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
}
extension UIImage {
  convenience public init<E, T>(icon: E, _ bundle: T.Type) where E : Swift.RawRepresentable, E.RawValue == Swift.String
}
extension VNWallet : VNCore.VNModule {
  public var moduleName: Swift.String {
    get
  }
  public func reset(completion: @escaping (Swift.Bool, Swift.Error?) -> Swift.Void)
}
extension VNCore.DeepLinkRoute.WalletRoutes : Swift.Equatable {}
extension VNCore.DeepLinkRoute.WalletRoutes : Swift.Hashable {}
extension VNCore.DeepLinkRoute.WalletRoutes : Swift.RawRepresentable {}
extension VNWalletUI.WalletMode : Swift.Equatable {}
extension VNWalletUI.WalletMode : Swift.Hashable {}
extension VNWalletUI.WalletMode : Swift.RawRepresentable {}
